MODULE = FLTK               PACKAGE = FLTK::AssociationType

 # TODO

#if 0

#include <fltk/WidgetAssociation.h>

=pod

=head1 Description

Base class for the association type.

FLTK allows you to attach any kind of user data to a widget. This data is
automatically freed when the widget to which it is attached is destroyed.
Internally an association table is used to connect the widget pointer with the
data pointer that is why all the functions concerned with this feature contain
"association" in their name. The advantage of this is that no space is taken
on widgets that do not contain the data (or that have the "default value"),
and that the destructor code is not linked in if the association is not used.

To be able to associate data and to be able to have a customized way of
freeing the data you need to derive from this class and then create an
instance of that class. With the pointer to that instance the type of the data
is identified.

possible uses:

=over 8

=item assign key shortcuts to certain widgets

=item assign a tooltip to some widgets

=item assign a help-index to widgets

=item assign a unique identifier to widgets to remote controlling

=item assign additional layouting data for new container widgets

=item assign data needed by typesafe callback mechanisms

=item assign all kind of data not always required within a widget / each widget

=back

Inherited by L<FLTK::shortcutAssociationType|FLTK::shortcutAssociationType>.

=cut

=for apidoc x||bool|foreach|FLTL::AssociationType|FLTK::Widget|CODE

This function allows traversing all associations of a certain association
type, a certain widget, both, or none of the constraints. For each found
widget the handle function in the associaionFunctor class is called. If that
function returns true the scan is aborted and the data for the current widget
is returned A C<NULL> pointer for the
L<AssociationType|FLTK::AssociationType> or the L<Widget|FLTK::Widget> pointer
means to call the functor for all L<AssociationTypes|FLTK::AssociationType>
AssociationTypes and/or all L<Widgets|FLTK::Widget>.

The function either returns the first associated data for which the functor
returns C<true>, or <undef>.

See also L<Widget::foreach()|FLTK::Widget/"foreach"> and
L<AssociationType::foreach()|FLTK::AssociationType/"foreach">.

=cut

void *
fltk::AssociationType::foreach ( ATYPE, WIDGET, AFUNC )
    const fltk::AssociationType * ATYPE
    const fltk::Widget          * WIDGET
    fltk::AssociationFunctor    & AFUNC

=pod

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

=head1 License and Legal

Copyright (C) 2009 by Sanko Robinson E<lt>sanko@cpan.orgE<gt>

This program is free software; you can redistribute it and/or modify
it under the terms of The Artistic License 2.0.  See the F<LICENSE>
file included with this distribution or
http://www.perlfoundation.org/artistic_license_2_0.  For
clarification, see http://www.perlfoundation.org/artistic_2_0_notes.

When separated from the distribution, all POD documentation is covered
by the Creative Commons Attribution-Share Alike 3.0 License.  See
http://creativecommons.org/licenses/by-sa/3.0/us/legalcode.  For
clarification, see http://creativecommons.org/licenses/by-sa/3.0/us/.

=for git $Id$ for got=

=cut

#endif
