Color
color ( COLOR = "", ... )
    CASE: items == 1 || ! items
        const char * COLOR
    CASE: items == 3
        int r = (int)SvIV(ST(0));
        int g = (int)SvIV(ST(1));
        int b = (int)SvIV(ST(2));
        CODE:
            RETVAL = fltk::color( r, g, b );
        OUTPUT:
            RETVAL

Color
parsecolor ( NAME = "", LENGTH = strlen(NAME) )
    const char * NAME;
    unsigned LENGTH;
    CODE:
        RETVAL = fltk::parsecolor( NAME, LENGTH );
    OUTPUT:
        RETVAL

Color
lerp ( COLOR1, COLOR2, WEIGHT )
    Color COLOR1;
    Color COLOR2;
    float WEIGHT;

Color
inactive ( COLOR_FG, COLOR_BG = NO_INIT )
    Color COLOR_FG;
    Color COLOR_BG;

Color
contrast ( COLOR_FG, COLOR_BG )
    Color COLOR_FG;
    Color COLOR_BG;

void
split_color ( COLOR, R, G, B )
    Color 	COLOR;
    unsigned char R;
    unsigned char G;
    unsigned char B;
    OUTPUT:
        R
        G
        B

void
set_color_index ( INDEX, COLOR )
    Color INDEX;
    Color COLOR;

Color
get_color_index ( COLOR )
    Color COLOR;

void
set_background ( COLOR )
    Color COLOR;

Color
nearest_index ( COLOR )
    Color COLOR;

#include <fltk/ColorChooser.h>

bool
color_chooser ( NAME, R, G = 0, B = 0, A = 0 )
    CASE: items == 2
        const char * NAME;
        Color        R;
        C_ARGS:
            NAME, R
        OUTPUT:
            RETVAL
            R
    CASE: items == 4 && SvPOK(ST(1)) && SvPOK(ST(2)) && SvPOK(ST(3))
        const char * NAME;
        uchar        R;
        uchar        G;
        uchar        B;
        C_ARGS:
            NAME, R, G, B
        OUTPUT:
            RETVAL
            R
            G
            B
    CASE: items == 5 && SvPOK(ST(1)) && SvPOK(ST(2)) && SvPOK(ST(3)) && SvPOK(ST(4))
        const char * NAME;
        uchar        R;
        uchar        G;
        uchar        B;
        uchar        A;
        OUTPUT:
            RETVAL
            R
            G
            B
            A
    CASE: items == 4 && SvNOK(ST(1)) && SvNOK(ST(2)) && SvNOK(ST(3))
        const char * NAME;
        float        R;
        float        G;
        float        B;
        C_ARGS:
            NAME, R, G, B
        OUTPUT:
            RETVAL
            R
            G
            B
    CASE: items == 5 && SvNOK(ST(1)) && SvNOK(ST(2)) && SvNOK(ST(3)) && SvNOK(ST(4))
        const char * NAME;
        float        R;
        float        G;
        float        B;
        float        A;
        OUTPUT:
            RETVAL
            R
            G
            B
            A

 #
 # Copyright (C) 2009 by Sanko Robinson <sanko@cpan.org>
 #
 # This program is free software; you can redistribute it and/or modify it
 # under the terms of The Artistic License 2.0.  See the LICENSE file
 # included with this distribution or
 # http://www.perlfoundation.org/artistic_license_2_0.  For
 # clarification, see http://www.perlfoundation.org/artistic_2_0_notes.
 #
 # When separated from the distribution, all POD documentation is covered by
 # the Creative Commons Attribution-Share Alike 3.0 License.  See
 # http://creativecommons.org/licenses/by-sa/3.0/us/legalcode.  For
 # clarification, see http://creativecommons.org/licenses/by-sa/3.0/us/.
 #
 # $Id$
 #
