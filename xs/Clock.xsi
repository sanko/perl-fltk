#ifndef DISABLE_CLOCKOUTPUT

MODULE = FLTK               PACKAGE = FLTK::ClockOutput

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract Base class of FLTK::Clock

=for git $Id$

=head1 Description

Base class of L<C<Clock>|FLTK::Clock>, this one does not move, it just
displays whatever time  you set into it.

L<C<type()>|FLTK::Widget/"type"> may be set to C<SQUARE>, C<ROUND>, or
C<DIGITAL> (nyi).

=begin apidoc

=cut

#include <fltk/Clock.h>

=for apidoc ||FLTK::ClockOutput|new|x|y|w|h|label = ""



=cut

void
fltk::ClockOutput::new( int x, int y, int w, int h, const char * label = 0 )
    PPCODE:
        void * RETVAL = NULL;
        RETVAL = (void *) new WidgetSubclass<fltk::ClockOutput>(CLASS,x,y,w,h,label);
        if (RETVAL != NULL) {
            ST(0) = sv_newmortal( );
            sv_setref_pv(ST(0), CLASS, RETVAL); /* -- hand rolled -- */
            XSRETURN(1);
        }

=begin apidoc

=for apidoc et[clock]||int|SQUARE|



=for apidoc et[clock]||int|ANALOG|



=for apidoc et[clock]||int|ROUND|



=for apidoc et[clock]||int|DIGITAL|



=cut

BOOT:
    newCONSTSUB(FLTK_stash, "SQUARE", newSViv(fltk::ClockOutput::SQUARE));
    export_tag("SQUARE", "clock");
    newCONSTSUB(FLTK_stash, "ANALOG", newSViv(fltk::ClockOutput::ANALOG));
    export_tag("ANALOG", "clock");
    newCONSTSUB(FLTK_stash, "ROUND", newSViv(fltk::ClockOutput::ROUND));
    export_tag("ROUND", "clock");
    newCONSTSUB(FLTK_stash, "DIGITAL", newSViv(fltk::ClockOutput::DIGITAL));
    export_tag("DIGITAL", "clock");

=for apidoc |||value|time

Set the clock to a Unix timestamp. The value is passed through the
L<C<localtime()>|/"localtime"> function and used to get the hour, minute, and
second.

=for apidoc |||value|hour|minute|second

Set the hour, minute, and second to display. The hour is effectively taken
modulus 12 and the minute and second modulus 60 to figure out where to place
the hands. Redraw happens only if different.

Note that this does not set the L<C<value()>|/"value">; ...without the date,
it really can't.

=for apidoc ||time|value|

Return the last Unix timestamp the clock was set to.

=cut

unsigned long
fltk::ClockOutput::value( unsigned long time = NO_INIT, int minute = NO_INIT, int second = NO_INIT )
    CASE: items == 1
        CODE:
            RETVAL = THIS->value( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        CODE:
            THIS->value( time );
            XSRETURN_EMPTY;
    CASE: items == 4
        CODE:
            THIS->value( time, minute, second );
            XSRETURN_EMPTY;

=for apidoc ||h|hour|

Return the hour sent to the last call to L<C<value()>|/"value">.

=for apidoc ||m|minute|

Return the minute sent to the last call to L<C<value()>|/"value">.

=for apidoc ||s|second|

Return the second sent to the last call to L<C<value()>|/"value">.

=cut

int
fltk::ClockOutput::hour( )

int
fltk::ClockOutput::minute( )

int
fltk::ClockOutput::second( )

BOOT:
    isa("FLTK::ClockOutput", "FLTK::Widget");

#endif // #ifndef DISABLE_CLOCKOUTPUT

#ifndef DISABLE_CLOCK

MODULE = FLTK               PACKAGE = FLTK::Clock

=end apidoc

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract Clock widget for the Fast Light Tool Kit (FLTK).

=for git $Id$

=head1 Description

This widget provides a round analog clock display and is provided for Forms
compatibility. It installs a 1-second timeout callback using
L<C<FLTK::add_timeout()>|FLTK/"add_timeout">.

The L<C<color()>|FLTK::Color/"color"> fills the background. The
L<C<selectioncolor()>|FLTK::color/"selectioncolor"> (which defaults to
C<GRAY85>) fills the hands. The L<C<textcolor()>|FLTK::color/"textcolor"> is
used to color in the tick marks and outline the hands.

L<C<type()>|FLTK::Widget/"type"> may be set to C<SQUARE>, C<ROUND>, or
C<DIGITAL>). See the base class L<ClockOutput|FLTK::ClockOutput> for some
other methods.

=head1 Design credits

Original clock display written by Paul Haeberli at SGI.

Modifications by Mark Overmars for Forms

Further changes by Bill Spitzak for fltk

=cut

#include <fltk/Clock.h>

=begin apidoc

=for apidoc ||FLTK::Clock|new|x|y|w|h|label = ""



=cut

void
fltk::Clock::new( int x, int y, int w, int h, const char * label = 0 )
    PPCODE:
        void * RETVAL = NULL;
        RETVAL = (void *) new WidgetSubclass<fltk::Clock>(CLASS,x,y,w,h,label);
        if (RETVAL != NULL) {
            ST(0) = sv_newmortal();
            sv_setref_pv(ST(0), CLASS, RETVAL); /* -- hand rolled -- */
            XSRETURN(1);
        }

BOOT:
    isa("FLTK::Clock", "FLTK::ClockOutput");

#endif // ifndef DISABLE_CLOCK
