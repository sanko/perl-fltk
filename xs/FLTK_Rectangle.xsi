#include <fltk/Rectangle.H>

MODULE = FLTK PACKAGE = FLTK::Rectangle

fltk::Rectangle *
Rectangle::new( ... )
    CASE: items == 1
        CODE:
            RETVAL = new fltk::Rectangle( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        const fltk::Rectangle * r = (fltk::Rectangle *)SvIV((SV*)SvRV(ST(1)));
        CODE:
            RETVAL = new fltk::Rectangle((const fltk::Rectangle&) r);
        OUTPUT:
            RETVAL
    CASE: items == 3
        int w = (int)SvIV(ST(1));
        int h = (int)SvIV(ST(2));
        CODE:
            RETVAL = new fltk::Rectangle(w, h);
        OUTPUT:
            RETVAL
    CASE: (items == 4 || items == 5) && (sv_isobject(ST(1)) && (SvTYPE(SvRV(ST(1))) == SVt_PVMG))
        const fltk::Rectangle * r     = (fltk::Rectangle *)SvIV((SV*)SvRV(ST(1)));
        int                     w     = (int)SvIV(ST(2));
        int                     h     = (int)SvIV(ST(3));
        int                     flags = (int)SvIV(ST(4));
        CODE:
            RETVAL = new fltk::Rectangle((const fltk::Rectangle&) r, w, h, flags);
        OUTPUT:
            RETVAL
    CASE: items == 5
        int x = (int)SvIV(ST(1));
        int y = (int)SvIV(ST(2));
        int w = (int)SvIV(ST(3));
        int h = (int)SvIV(ST(4));
        CODE:
            RETVAL = new fltk::Rectangle(x, y, w, h);
        OUTPUT:
            RETVAL

void
fltk::Rectangle::DESTROY()

int
fltk::Rectangle::x ( x = NO_INIT )
    CASE: items == 1
        CODE:
            RETVAL = THIS->x( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        int x
        CODE:
            THIS->x( x );
            RETVAL = THIS->x( ) == x ? x : NULL;
        OUTPUT:
            RETVAL

int
fltk::Rectangle::y ( y = NO_INIT )
    CASE: items == 1
        CODE:
            RETVAL = THIS->y( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        int y
        CODE:
           THIS->y( y );
            RETVAL = THIS->y( ) == y ? y : NULL;
        OUTPUT:
            RETVAL

int
fltk::Rectangle::w ( w = NO_INIT)
    CASE: items == 1
        CODE:
            RETVAL = THIS->w( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        int w
        CODE:
           THIS->w( w );
            RETVAL = THIS->w( ) == w ? w : NULL;
        OUTPUT:
            RETVAL

int
fltk::Rectangle::h ( h = NO_INIT )
    CASE: items == 1
        CODE:
            RETVAL = THIS->h( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        int h
        CODE:
           THIS->h( h );
            RETVAL = THIS->h( ) == h ? h : NULL;
        OUTPUT:
            RETVAL

int
fltk::Rectangle::r ( )

int
fltk::Rectangle::b ( )

void
fltk::Rectangle::set_x ( int v )

void
fltk::Rectangle::set_y ( int v )

void
fltk::Rectangle::set_r ( int v )

void
fltk::Rectangle::set_b ( int v )

void
fltk::Rectangle::set( int x, int y, int w, int h)

void
fltk::Rectangle::move_x ( int v )

void
fltk::Rectangle::move_y ( int v )

void
fltk::Rectangle::move_r ( int v )

void
fltk::Rectangle::move_b ( int v )

void
fltk::Rectangle::inset ( int v )

void
fltk::Rectangle::move ( int dx, int dy )

bool
fltk::Rectangle::empty ( )

bool
fltk::Rectangle::not_empty ( )

int
fltk::Rectangle::center_x ( )

int
fltk::Rectangle::center_y ( )

int
fltk::Rectangle::baseline_y ( )

bool
fltk::Rectangle::contains ( int x, int y )

 #void
 #fltk::Rectangle::merge ( fltk::Rectangle & r )

 # TODO: void fltk::Rectangle::merge  (  const Rectangle & r )
 # Replace the value with the union of this rectangle and R (ie the rectangle
 # that surrounds both of these rectangles). If one rectangle is empty(), the
 # other is returned unchanged (ie it does not union in the degenerate point
 # of that rectangle).

 #void
 #fltk::Rectangle::intersect ( fltk::Rectangle r )

 # TODO: void fltk::Rectangle::intersect  (  const Rectangle &   r   )
 # Replace the value with the intersection of this rectangle and R. If the
 # rectangles do not intersect, the result may have negative width and/or
 # height, this means empty() will return true, but some code may still draw
 # this rectangle.

 # Children
INCLUDE: FLTK_Monitor.xsi
INCLUDE: FLTK_Widget.xsi


 # $Id: FLTK_Rectangle.xsi 4600afd 2009-03-22 16:15:25Z sanko@cpan.org $
