MODULE = FLTK               PACKAGE = FLTK::ClockOutput

=pod

=head1 Description

Base class of L<Clock|FLTK::Clock>, this one does not move, it just displays
whatever time you set into it.

L<C<type()>|/"type"> may be set to L<C<SQUARE>|/"SQUARE">,
L<C<ROUND>|/"ROUND">, or L<C<DIGITAL>|/"DIGITAL"> (nyi).

Inherits L<FLTK::Widget|FLTK::Widget>.

Inherited by L<FLTK::Clock|FLTK::Clock>.

=cut

#include <fltk/Clock.H>

=for apidoc ||FLTK::ClockOutput|new

Creates a new C<FLTK::ClockOutput> object. Obviously.

=cut

fltk::ClockOutput *
fltk::ClockOutput::new(x, y, w, h, label = 0)
    int x
    int y
    int w
    int h
    char * label
    CODE:
        RETVAL = new fltk::ClockOutput( x, y, w, h, label);
        RETVAL->copy_label(label);
        /* warn("%s|%s", RETVAL->label(), label); */
    OUTPUT:
        RETVAL

#if ALLOW_DESTROY

bool
fltk::ClockOutput::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, ClockOutput (label: '%s')", THIS->label());
#endif
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif

 # Public Types

=for apidoc e||int|SQUARE|

Same as L<C<ANALOG>|/"ANALOG">.

=cut

int
SQUARE ( )
    CODE:
        RETVAL = fltk::ClockOutput::SQUARE;
    OUTPUT:
        RETVAL

=for apidoc e||int|ANALOG|

Same as L<C<SQUARE>|/"SQUARE">.

=cut

int
ANALOG ( )
    CODE:
        RETVAL = fltk::ClockOutput::ANALOG;
    OUTPUT:
        RETVAL

=for apidoc e||int|ROUND|

NFI

=cut

int
ROUND ( )
    CODE:
        RETVAL = fltk::ClockOutput::ROUND;
    OUTPUT:
        RETVAL

=for apidoc e||int|DIGITAL|

NFI

=cut

int
DIGITAL ( )
    CODE:
        RETVAL = fltk::ClockOutput::DIGITAL;
    OUTPUT:
        RETVAL


 # Public Member Functions

=for apidoc ||int|hour|

Return the hour sent to the last call to L<C<value()>|/"value">.

=cut

int
fltk::ClockOutput::hour ( )


=for apidoc ||int|minute|

Return the minute sent to the last call to L<C<value()>|/"value">.

=cut

int
fltk::ClockOutput::minute ( )

=for apidoc ||int|second|

Return the second sent to the last call to L<C<value()>|/"value">.

=cut

int
fltk::ClockOutput::second ( )

=for apidoc ||unsigned long|value|

Return the last Unix timestamp the clock was set to.

=cut

=for apidoc |||value|HOUR|MINUTE|SECOND

Set the hour, minute, and second to display. The hour is effectively taken
modulus C<12> and the minute and second modulus C<60> to figure out where to
place the hands. Redraw happens only if different.

This does not set the unsigned long L<C<value()>|/"value"> member, as it can't
because it does not know the date.

=cut

=for apidoc |||value|TIME

Set the clock to a Unix timestamp. The value is passed through the
L<C<localtime()>|/"localtime"> library function and used to get the hour,
minute, and second.

=cut

unsigned long
fltk::ClockOutput::value ( TIME, MINUTE = NO_INIT, SECOND = NO_INIT )
    CASE: items == 1
        CODE:
            RETVAL = THIS->value( );
        OUTPUT:
            RETVAL
    CASE: items == 4
        int TIME
        int MINUTE
        int SECOND
        CODE:
            THIS->value( TIME, MINUTE, SECOND );
    CASE: items == 2
        unsigned long TIME
        CODE:
            THIS->value( TIME );

 # Protected Member Functions

#if 0

=for apidoc h|||draw|

NFI

=cut

=for apidoc h|||draw|[HOUR]|[MINUTE]|[SECOND]

NFI

=cut

void
fltk::ClockOutput::draw ( HOUR = NO_INIT, MINUTE = NO_INIT, SECOND = NO_INIT )
    CASE: items == 1
        CODE:
            THIS->draw( );
    CASE: items == 4
        int HOUR
        int MINUTE
        int SECOND
        CODE:
            THIS->draw( HOUR, MINUTE, SECOND );

#endif

 # Static Public Attributes

=for apidoc ||FLTK::NamedStyle|default_style|

NFI

=cut

fltk::NamedStyle *
fltk::ClockOutput::default_style ( )
    CODE:
        RETVAL = THIS->default_style;
    OUTPUT:
        RETVAL

=pod

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

=head1 License and Legal

Copyright (C) 2009 by Sanko Robinson E<lt>sanko@cpan.orgE<gt>

This program is free software; you can redistribute it and/or modify
it under the terms of The Artistic License 2.0.  See the F<LICENSE>
file included with this distribution or
http://www.perlfoundation.org/artistic_license_2_0.  For
clarification, see http://www.perlfoundation.org/artistic_2_0_notes.

When separated from the distribution, all POD documentation is covered
by the Creative Commons Attribution-Share Alike 3.0 License.  See
http://creativecommons.org/licenses/by-sa/3.0/us/legalcode.  For
clarification, see http://creativecommons.org/licenses/by-sa/3.0/us/.

=for git $Id$ for got=

=cut
