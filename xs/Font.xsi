MODULE = FLTK               PACKAGE = FLTK::Font

=pod

=head1 Description

Identifies a font. You can create these with
L<C<FLTK::font(name)>|FLTK/"font"> or with
L<C<FLTK::list_fonts()>|FLTK/"list_fonts">. Do not attempt to create your
instances or modify it.

This is a struct so that fltk can initialize a table internally with
constants. Don't use the undocumented fields.

=cut

#include <fltk/Font.H>

=for apidoc ||FLTK::Font|new

Creates a new C<FLTK::Font> object. Obviously.

=cut


#if ALLOW_DESTROY

bool
fltk::Font::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, Font" );
#endif
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif


 # Public Member Functions

=for apidoc ||FLTK::Font|bold|

Same as L<C<plus(BOLD)>|/"plus">, returns a bold version of this font.

=cut

fltk::Font *
fltk::Font::bold ( )

#if 0

=for apidoc H||int|encodings|ARRAYP

Return all the encodings for this font. These strings may be sent to
L<C<FLTK::set_encoding()>|/"set_encoding"> before using the font.

The return value is the length of the list. The argument C<ARRAYP> is set to
point at the array, which is in static memory reused each time this call is
done.

=cut

int
fltk::Font::encodings ( ARRAYP )
    const char ** ARRAYP

#endif

=for apidoc ||FLTK::Font|italic|

Same as L<C<plus(ITALIC)>|/"plus">, returns an italic version of this font.

=cut

fltk::Font *
fltk::Font::italic ( )

=for apidoc ||const char *|name|ATTIBUTES

Return a string name for this font, and put any attributes (C<BOLD>,
C<ITALIC>) into the location pointed to by attributes. Using the returned
string and attributes as arguments to L<C<find()>|/"find"> will return the
same font.

=cut

=for apidoc ||const char *|name|

Return a single string that names this font. Passing this string and zero for
the attributes to L<C<find()>|/"find"> will return the same font.

If the font's attributes are non-zero, this is done by appending a space and
"Bold" and/or "Italic" to the name. This allows a single string rather than a
string+attribute pair to identify a font, which is really useful for saving
them in a file. I<The return value is in a temporary buffer that will be
overwritten on the next call in this case.>

=cut

const char *
fltk::Font::name ( ATTRIBUTES = NO_INIT )
    CASE: items == 2
        int ATTRIBUTES
        C_ARGS: (int *) ATTRIBUTES
        OUTPUT:
            RETVAL
            ATTRIBUTES
    CASE:
        CODE:
            RETVAL = THIS->name( );
        OUTPUT:
            RETVAL

=for apidoc ||FLTK::Font|plus|ATTRIBUTES

Return a font from the same family with the extra attributes turned on. This
may return the same font if the attributes are already on or there is no font
with those attributes.

=cut

fltk::Font *
fltk::Font::plus ( ATTRIBUTES )
    int ATTRIBUTES

#if 0

=for apidoc H||int|sizes|SIZEP

Sets array to point at a list of sizes. The return value is the length of this
array. The sizes are sorted from smallest to largest and indicate what sizes
can be given to L<C<FLTK::setfont()>|FLTK/"set_font"> that will be matched
exactly (L<C<FLTK::setfont()>|FLTK/"set_font"> will pick the closest size for
other sizes). A zero in the first location of the array indicates a scalable
font, where any size works, although the array may still list sizes that work
"better" than others. The returned array points at a static buffer that is
overwritten each call, so you want to copy it if you plan to keep it.

The return value is the length of the list. The argument C<SIZEP> is set to
point at the array, which is in static memory reused each time this call is
done.

=cut

int
fltk::Font::sizes ( SIZEP )
    int * & SIZEP

#endif

=for apidoc ||const char *|system_name|

Returns the string actually passed to the operating system, which may be
different than L<C<Cname()>|/"name">. For Xlib this is a pattern sent to
XListFonts to find all the sizes. For most other systems this is the same as
L<C<Cname()>|/"name"> without any attributes.

=cut

 # Static Public Member Functions

=for apidoc ||const char *|current_name|

Return the full X11 name for the currently selected font+size+encoding. This
is mostly useful for debugging, though maybe you need to copy it to another
program.

On non-X systems, and on modern X systems with Xft (antialiased fonts) this
returns C<current_font()->system_name()>.

=cut

const char *
fltk::Font::default_style ( )
    CODE:
        RETVAL = (const char *) THIS->current_name;
    OUTPUT:
        RETVAL


 # Related Functions

MODULE = FLTK               PACKAGE = FLTK

=for apidoc ||FLTK::Font|font|NAME|ATTRIBUTES

Find a font with the given "nice" name. You can get bold and italic by adding a space and "bold" or "italic" (or both) to the name, or by passing them as the attributes. Case is ignored and fltk will accept some variations in the font name.

The current implementation calls L<C<FLTK::list_fonts()>|/"list_fonts"> and
then does a binary search of the returned list. This can make the first call
pretty slow, especially on X. Directly calling the system has a problem in
that we want the same structure returned for any call that names the same
font. This is sufficiently painful that I have not done this yet.

=cut

=for apidoc ||FLTK::FONT|font|INT

Turn an fltk1 integer font id into a font.

=cut

fltk::Font *
font ( NAME, ATTRIBUTES = NO_INIT )
    CASE: items == 3
        const char * NAME
        int          ATTRIBUTES
        CODE:
            RETVAL = fltk::font ( NAME, ATTRIBUTES );
        OUTPUT:
            RETVAL
    CASE: items == 2
        int NAME
        CODE:
            RETVAL = fltk::font( NAME );
        OUTPUT:
            RETVAL

=pod

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

=head1 License and Legal

Copyright (C) 2009 by Sanko Robinson E<lt>sanko@cpan.orgE<gt>

This program is free software; you can redistribute it and/or modify
it under the terms of The Artistic License 2.0.  See the F<LICENSE>
file included with this distribution or
http://www.perlfoundation.org/artistic_license_2_0.  For
clarification, see http://www.perlfoundation.org/artistic_2_0_notes.

When separated from the distribution, all POD documentation is covered
by the Creative Commons Attribution-Share Alike 3.0 License.  See
http://creativecommons.org/licenses/by-sa/3.0/us/legalcode.  For
clarification, see http://creativecommons.org/licenses/by-sa/3.0/us/.

=for git $Id$

=cut
