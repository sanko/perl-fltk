#ifndef DISABLE_ADJUSTER

MODULE = FLTK               PACKAGE = FLTK::Adjuster

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for git $Id$

=head1 Description

L<Valuator|FLTK::Valuator> widget that displays three buttons. The user pushes
down the button and drags left/right to adjust, or clicks the button to step,
or shift-clicks to step backwards. One button moves in the
L<C<step()>|FLTK::Valuator/"step"> values, the next in
C<10 * >L<C<step()>|FLTK::Valuator/"step">, and the third in
C<100 * >L<C<step()>|FLTK::Valuator/"step">. Holding down shift makes the
buttons move in the opposite way.

B<Note: This is a depreciated widget. Please see
L<FLTK::Notes|FLTK::Notes/"NotesDepPol">.>

=begin apidoc

=cut

#include <fltk/Adjuster.h>

=for apidoc d||FLTK::Adjuster|new|x|y|width|height|label = ''

Creates a new C<FLTK::Adjuster> object.

=cut

#include "include/WidgetSubclass.h"

void
fltk::Adjuster::new( int x, int y, int w, int h, const char * label = 0 )
    PPCODE:
        void * RETVAL = NULL;
        RETVAL = (void *) new WidgetSubclass<fltk::Adjuster>(CLASS,x,y,w,h,label);
        if (RETVAL != NULL) {
            ST(0) = sv_newmortal();
            sv_setref_pv(ST(0), CLASS, RETVAL); /* -- hand rolled -- */
            XSRETURN(1);
        }

=for apidoc d||FLTK::NamedStyle|default_style|

TODO

=cut

static fltk::NamedStyle *
fltk::Adjuster::default_style ( )
    CODE:
        RETVAL = THIS->default_style;
    OUTPUT:
        RETVAL

=for apidoc d|||soft|int

TODO

=for apidoc d||int|soft|

=cut

int
fltk::Adjuster::soft ( int x = NO_INIT )
    CASE: items == 1
        CODE:
            RETVAL = THIS->soft( );
        OUTPUT:
            RETVAL
    CASE:
        CODE:
            THIS->soft( X );

#ifndef DISABLE_HANDLE

=for apidoc d||int|handle|event

See L<C<handle()>|FLTK::Valuator/handle> in L<FLTK::Valuator|FLTK::Valuator>.

=cut

int
fltk::Adjuster::handle ( int event )

#endif // #ifndef DISABLE_HANDLE

BOOT:
    isa("FLTK::Adjuster", "FLTK::Valuator");

#endif // ifndef DISABLE_ADJUSTER
