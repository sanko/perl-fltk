#ifndef DISABLE_COLORCHOOSER

MODULE = FLTK               PACKAGE = FLTK::ColorChooser

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract Color chooser for the Fast Light Tool Kit (FLTK).

=for git $Id$

=head1 Description

The color chooser object and the color chooser popup.  The popup is just a
window containing a single color chooser and some boxes to indicate the
current and cancelled color.

=cut

#include <fltk/ColorChooser.h>

=for apidoc ||ColorChooser|new|x|y|w|h|label = ""



=cut

ColorChooser *
ColorChooser::new( int x , int y, int w, int h, const char* label = 0 );

#ifdef ENABLE_DESTROY

bool
ColorChooser::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, ColorChooser" );
#endif // #if VERBOSE >= 2
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif // #ifdef ENABLE_DESTROY

=for apidoc ||double|h|



=for apidoc ||double|s|



=for apidoc ||double|v|



=for apidoc ||double|r|



=for apidoc ||double|g|



=for apidoc ||double|b|



=cut

double
ColorChooser::h( )
    CODE:
        switch ( ix ) {
            case 0: RETVAL = THIS->h(); break;
            case 1: RETVAL = THIS->s(); break;
            case 2: RETVAL = THIS->v(); break;
            case 3: RETVAL = THIS->r(); break;
            case 4: RETVAL = THIS->g(); break;
            case 5: RETVAL = THIS->b(); break;
        }
    OUTPUT:
        RETVAL
    ALIAS:
        s = 1
        v = 2
        r = 3
        g = 4
        b = 5

=for apidoc ||bool|no_value|



=for apidoc ||bool|no_value|bool



=cut

bool
ColorChooser::no_value ( bool value = NO_INIT )
    CASE: items == 1
        C_ARGS:
        OUTPUT:
            RETVAL
    CASE:
        OUTPUT:
            RETVAL

=for apidoc ||FLTK::Color|value



=for apidoc ||bool|value|color



=cut

int
ColorChooser::value( Color color = NO_INIT )
    PPCODE:
        if ( items == 1 ) {
            Color RETVAL = THIS->value();
            XSprePUSH; PUSHi((IV)RETVAL);
        }
        else if ( items == 2 ) {
            bool RETVAL = THIS->value ( color );
            ST(0) = boolSV(RETVAL);
            sv_2mortal(ST(0));
        }
        XSRETURN(1);

=for apidoc ||bool|hsv|h|s|v



=cut

bool
ColorChooser::hsv( float h, float s, float v )

=for apidoc ||bool|rgb|r|g|b



=cut

bool
ColorChooser::rgb( float r, float g, float b )

=for apidoc ||double|a|



=for apidoc ||bool|a|a



=cut

double
ColorChooser::a( float a )
    CASE: items == 1
        C_ARGS:
    CASE:
        C_ARGS: a

=for apidoc |||hide_a|



=for apidoc |||hide_no_value|



=cut

void
ColorChooser::hide_a( )
    CODE:
        switch( ix ) {
            case 0: THIS->hide_a( );        break;
            case 1: THIS->hide_no_value( ); break;
        }
    ALIAS:
        hide_no_value = 1

=for apidoc |||hsv2rgb|h|s|v|r|g|b



=cut

void
ColorChooser::hsv2rgb( float h, float s, float v, float r, float g, float b )
    OUTPUT:
        r
        g
        b

=for apidoc ||rgb2hsv|r|g|b|h|s|v



=cut

void
ColorChooser::rgb2hsv( float r, float g, float b, float h, float s, float v )
    OUTPUT:
        h
        s
        v

=for apidoc |||layout|



=cut

void
ColorChooser::layout( )

=for apidoc ||bool|color_chooser|name|r|g|b

L<C<FLTK::color_chooser()>|/"color_chooser"> pops up a window to let the user
pick an arbitrary RGB color. They can pick the hue and saturation in the "hue
box" on the left (hold down C<CTRL> to just change the saturation), and the
brighness using the vertical slider. Or they can type the 8-bit numbers into
the RGB L<FLTK::ValueInput|FLTK::ValueInput> fields, or drag the mouse across
them to adjust them. The pull-down menu lets the user set the input fields to
show RGB, HSV, or 8-bit RGB (0 to 255).

This returns non-zero if the user picks ok, and updates the RGB values. If the
user picks cancel or closes the window this returns zero and leaves RGB
unchanged.

This version takes and returns numbers in the 0-1 range.

If you which to embed a color chooser into another control panel, use an
L<FLTK::ColorChooser|FLTK::ColorChooser/"new"> object.

=for apidoc ||bool|color_chooser|name|r|g|b|a

Same but user can also select an alpha value. Currently the color chips do not
remember or set the alpha!

=for apidoc ||bool|color_chooser|name|color

Same but it takes and returns an L<FLTK::Color|FLTK::Color> number. No alpha.

=cut

MODULE = FLTK               PACKAGE = FLTK

bool
color_chooser ( const char * name, r, g = 0, b = 0, a = 0 )
    CASE: items == 2
        Color r;
        C_ARGS:
            name, r
        OUTPUT:
            RETVAL
            r
    CASE: items == 4 && SvPOK(ST(1)) && SvPOK(ST(2)) && SvPOK(ST(3))
        uchar r;
        uchar g;
        uchar b;
        C_ARGS:
            name, r, g, b
        OUTPUT:
            RETVAL
            r
            g
            b
    CASE: items == 5 && SvPOK(ST(1)) && SvPOK(ST(2)) && SvPOK(ST(3)) && SvPOK(ST(4))
        uchar r;
        uchar g;
        uchar b;
        uchar a;
        OUTPUT:
            RETVAL
            r
            g
            b
            a
    CASE: items == 4 && SvNOK(ST(1)) && SvNOK(ST(2)) && SvNOK(ST(3))
        float r;
        float g;
        float b;
        C_ARGS:
            name, r, g, b
        OUTPUT:
            RETVAL
            r
            g
            b
    CASE: items == 5 && SvNOK(ST(1)) && SvNOK(ST(2)) && SvNOK(ST(3)) && SvNOK(ST(4))
        float r;
        float g;
        float b;
        float a;
        OUTPUT:
            RETVAL
            r
            g
            b
            a

BOOT:
    isa("FLTK::ColorChooser", "FLTK::Group");

#endif // #ifndef DISABLE_COLORCHOOSER

#ifndef DISABLE_CCHUEBOX

MODULE = FLTK               PACKAGE = FLTK::ccHueBox

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract

=for git $Id$

=head1 Description



=cut

#include <fltk/ColorChooser.h>

=for apidoc ||ccHueBox|new|x|y|w|h



=cut

ccHueBox *
ccHueBox::new( int x , int y, int w, int h );

#ifndef DISABLE_HANDLE

=for apidoc ||int|handle|event



=cut

int
ccHueBox::handle( int event )

#endif // #ifndef DISABLE_HANDLE

BOOT:
    isa("FLTK::ccHueBox", "FLTK::Widget");

#endif // #ifndef DISABLE_CCHUEBOX

#ifndef DISABLE_CCVALUEBOX

MODULE = FLTK               PACKAGE = FLTK::ccValueBox

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract

=for git $Id$

=head1 Description



=cut

#include <fltk/ColorChooser.h>

=for apidoc ||ccValueBox|new|x|y|w|h



=cut

ccValueBox *
ccValueBox::new( int x , int y, int w, int h );

#ifdef ENABLE_DESTROY

bool
ccValueBox::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, ccValueBox" );
#endif // #if VERBOSE >= 2
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif // #ifdef ENABLE_DESTROY

#ifndef DISABLE_HANDLE

=for apidoc ||int|handle|event



=cut

int
ccValueBox::handle( int event )

#endif // #ifndef DISABLE_HANDLE

BOOT:
    isa("FLTK::ccValueBox", "FLTK::Widget");

#endif // #ifndef DISABLE_CCVALUEBOX

#ifndef DISABLE_CCCELLBOX

MODULE = FLTK               PACKAGE = FLTK::ccCellBox

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract

=for git $Id$

=head1 Description



=cut

#include <fltk/ColorChooser.h>

=for apidoc ||ccCellBox|new|x|y|w|h



=cut

ccCellBox *
ccCellBox::new( int x , int y, int w, int h );

#ifdef ENABLE_DESTROY

bool
ccCellBox::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, ccCellBox" );
#endif // #if VERBOSE >= 2
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif // #ifdef ENABLE_DESTROY

#ifndef DISABLE_HANDLE

=for apidoc ||int|handle|event



=cut

int
ccCellBox::handle( int event )

#endif // #ifndef DISABLE_HANDLE

BOOT:
    isa("FLTK::ccCellBox", "FLTK::Widget");

#endif // #ifndef DISABLE_CCCELLBOX
