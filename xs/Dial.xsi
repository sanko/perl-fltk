MODULE = FLTK               PACKAGE = FLTK::Dial

#if 1

=pod

=head1 Description

The L<FLTK::Dial|FLTK::Dial> widget provides a circular dial to control a
single floating point value.

Use type() to change how it draws:

=item L<C<Dial::NORMAL>/"NORMAL">
Draws a normal dial with a knob.

=item L<C<Dial::LINE>|/"LINE">
Draws a dial with a line.

=item L<C<Dial::FILL>|/"FILL">
Draws a dial with a filled arc.

You can change the L<C<box()>|/"box"> from the default of C<OVAL_BOX> to draw
different borders. The L<C<box()>|/"box"> is filled with
L<C<color()>|/"color">, the moving part is filled with
L<C<selection_color()>|/"selection_color">, and the border around the moving
part is set by L<C<textcolor()>|/"textcolor">.

Inherits L<FLTK::Valuator|FLTK::Valuator>.

Inherited by L<FLTK::FillDial|FLTK::FillDial>, and
L<FLTK::LineDial|FLTK::LineDial>.

=cut

#include <fltk/Dial.h>

=for apidoc ||FLTK::Dial|new

Creates a new C<FLTK::Dial> object. Obviously.

=cut

fltk::Dial *
fltk::Dial::new(x, y, w, h, label = 0)
    int x
    int y
    int w
    int h
    char * label
    CODE:
        RETVAL = new fltk::Dial( x, y, w, h, label);
        RETVAL->copy_label(label);
        /* warn("%s|%s", RETVAL->label(), label); */
    OUTPUT:
        RETVAL

#if ALLOW_DESTROY

bool
fltk::Dial::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, Dial (label: '%s')", THIS->label());
#endif
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif


 # Public Types

=for apidoc e||int|NORMAL|

Draws a normal dial with a knob.

=cut

int
NORMAL ( )
    CODE:
        RETVAL = fltk::Dial::NORMAL;
    OUTPUT:
        RETVAL

=for apidoc e||int|LINE|

Draws a dial with a line.

=cut

int
LINE ( )
    CODE:
        RETVAL = fltk::Dial::LINE;
    OUTPUT:
        RETVAL

=for apidoc e||int|FILL|

Draws a dial with a filled arc.

=cut

int
FILL ( )
    CODE:
        RETVAL = fltk::Dial::FILL;
    OUTPUT:
        RETVAL

 # Public Member Functions

=for apidoc |||angle1|ANGLE

See L<C<angles()>|/"angles">

=cut

=for apidoc ||short|angle1|

See L<C<angles()>|/"angles">

=cut

short
fltk::Dial::angle1 ( ANGLE = NO_INIT )
    CASE: items == 2
        short ANGLE
        CODE:
            THIS->angle1( ANGLE );
    CASE:
        CODE:
            RETVAL = THIS->angle1( );
        OUTPUT:
            RETVAL

=for apidoc |||angle2|ANGLE

See L<C<angles()>|/"angles">

=cut

=for apidoc ||short|angle2|

See L<C<angles()>|/"angles">

=cut

short
fltk::Dial::angle2 ( ANGLE = NO_INIT )
    CASE: items == 2
        short ANGLE
        CODE:
            THIS->angle2( ANGLE );
    CASE:
        CODE:
            RETVAL = THIS->angle2( );
        OUTPUT:
            RETVAL

=for apidoc |||angles|ANGLE1|ANGLE2

Sets the angles used for the minimum and maximum values. The default values
are C<45> and C<315> (C<0> degrees is straight down and the angles progress
clockwise). Normally C<ANGLE1> is less than C<ANGLE2>, but if you reverse them
the dial moves counter-clockwise.

=cut

void
fltk::Dial::angles ( ANGLE1, ANGLE2 )
    short ANGLE1
    short ANGLE2

=for apidoc ||int|handle|HANDLE

NFI

=cut

int
fltk::Dial::handle ( HANDLE )
    int HANDLE

 # Static Public Attributes

=for apidoc ||FLTK::NamedStyle|default_style|

NFI

=cut

fltk::NamedStyle *
fltk::Dial::default_style ( )
    CODE:
        RETVAL = THIS->default_style;
    OUTPUT:
        RETVAL

=pod

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

=head1 License and Legal

Copyright (C) 2009 by Sanko Robinson E<lt>sanko@cpan.orgE<gt>

This program is free software; you can redistribute it and/or modify
it under the terms of The Artistic License 2.0.  See the F<LICENSE>
file included with this distribution or
http://www.perlfoundation.org/artistic_license_2_0.  For
clarification, see http://www.perlfoundation.org/artistic_2_0_notes.

When separated from the distribution, all POD documentation is covered
by the Creative Commons Attribution-Share Alike 3.0 License.  See
http://creativecommons.org/licenses/by-sa/3.0/us/legalcode.  For
clarification, see http://creativecommons.org/licenses/by-sa/3.0/us/.

=for git $Id$

=cut

#endif
