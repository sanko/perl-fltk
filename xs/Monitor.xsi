MODULE = FLTK               PACKAGE = FLTK::Monitor

=pod

=head1 Description

Structure describing one of the monitors (screens) connected to the system.
You can ask for one by position with L<C<find()>|/"find">, ask for all of them
with L<C<list()>|/"list">, and ask for a fake one that surrounds all of them
with L<C<all()>|/"all">. You then look in the structure to get information
like the size and bit depth.

Inherits L<FLTK::Rectangle>.

=cut

#include <fltk/Monitor.h>

#if ALLOW_DESTROY

bool
fltk::Monitor::DESTROY ( )
    CODE:
#if VERBOSE >= 2
        warn ( "Bye, Monitor" );
#endif
        delete THIS;
        RETVAL = true;
    OUTPUT:
        RETVAL

#endif

 # Public Member Functions

=for apidoc ||int|depth|

NFI

=cut

int
fltk::Monitor::depth ( )

=for apidoc ||float|dpi|

NFI

=cut

float
fltk::Monitor::dpi ( )

=for apidoc ||float|dpi_x|

NFI

=cut

float
fltk::Monitor::dpi_x ( )

=for apidoc ||float|dpi_y|

NFI

=cut

float
fltk::Monitor::dpi_y ( )

 # Static Public Member Functions

=for apidoc ||FLTK::Monitor|all|

Return a "monitor" that surrounds all the monitors. If you have a single
monitor, this returns a monitor structure that defines it. If you have
multiple monitors this returns a fake monitor that surrounds all of them.

=cut

SV *
all ( )
    CODE:
        sv_setref_pv(RETVAL, "FLTK::Monitor", ( SV * ) &fltk::Monitor::all( ) );
    OUTPUT:
        RETVAL

=for apidoc x||FLTK::Monitor|find|X|Y

Return a pointer to a L<Monitor|FLTK::Monitor> structure describing the
monitor that contains or is closest to the given C<X, Y>, position.

=cut

SV *
find ( X, Y )
    int X
    int Y
    CODE:
        const fltk::Monitor * list;
        int count = fltk::Monitor::list( &list );
        //if ( count > 1 ) {
        //    warn( "...TODO: C<FLTK::Monitor::find( %d, %d )> crashes on my system.", X, Y );
            //sv_setref_pv( RETVAL, "FLTK::Monitor", (void *) (SV *) &fltk::Monitor::find( X, Y ) );
        //}
        //else {
            sv_setref_pv( RETVAL, "FLTK::Monitor", (void *) &list[0] );
        //}
    OUTPUT:
        RETVAL

=for apidoc ||int|list|ARRAYREF

Return an array of all L<Monitors|FLTK::Monitor>. C<ARRAYREF> is set to point
to a static array of L<Monitor|FLTK::Monitor> structures describing all
monitors connected to the system. If there is a "primary" monitor, it will be
first in the list.

Subsequent calls will usually return the same array, but if a signal comes in
indicating a change it will probably delete the old array and return a new
one.

=cut

int
list ( ARRAYREF )
    AV * ARRAYREF
    CODE:
        const fltk::Monitor * list;
        RETVAL = fltk::Monitor::list( &list );
        for (int i = 0; i < RETVAL; i ++) {
            SV * m_sv = (SV *) &list[i];
            sv_setref_pv(m_sv, "FLTK::Monitor", (void *) &list[i] );
            av_store(ARRAYREF, i, m_sv );
        }
    OUTPUT:
        RETVAL
        ARRAYREF

 # Static Public Attributes

=for apidoc ||FLTK::NamedStyle|default_style|

The default style sets L<C<box()>|/"box"> to C<UP_BOX>. This box is used
around all popup menus.

Reimplemented from L<FLTK::Window|FLTK::Window>.

Reimplemented in L<FLTK::Tooltip|FLTK::Tooltip>.

=cut

SV *
fltk::MenuBar::default_style ( )
    CODE:
        sv_setref_pv( RETVAL, "FLTK::NamedStyle", ( SV *) THIS->default_style );
    OUTPUT:
        RETVAL

=pod

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

=head1 License and Legal

Copyright (C) 2009 by Sanko Robinson E<lt>sanko@cpan.orgE<gt>

This program is free software; you can redistribute it and/or modify
it under the terms of The Artistic License 2.0.  See the F<LICENSE>
file included with this distribution or
http://www.perlfoundation.org/artistic_license_2_0.  For
clarification, see http://www.perlfoundation.org/artistic_2_0_notes.

When separated from the distribution, all POD documentation is covered
by the Creative Commons Attribution-Share Alike 3.0 License.  See
http://creativecommons.org/licenses/by-sa/3.0/us/legalcode.  For
clarification, see http://creativecommons.org/licenses/by-sa/3.0/us/.

=for git $Id$

=cut
