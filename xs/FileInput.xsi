#ifndef DISABLE_FILEINPUT

MODULE = FLTK               PACKAGE = FLTK::FileInput

=pod

=for license Artistic License 2.0 | Copyright (C) 2009 by Sanko Robinson

=for author Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=for abstract Subclass of FLTK::Browser

=for git $Id$

=head1 Description



=cut

#include <fltk/FileInput.h>

=for apidoc d||FileInput|new|X|Y|Width|Height|Label = ''

Creates a new C<FLTK::FileInput> object.

=cut

#include "include/WidgetSubclass.h"

void
FileInput::new( int x, int y, int w, int h, const char * label = 0 )
    PPCODE:
        void * RETVAL = NULL;
        RETVAL = (void *) new WidgetSubclass<FileInput>(CLASS,x,y,w,h,label);
        if (RETVAL != NULL) {
            ST(0) = sv_newmortal();
            sv_setref_pv(ST(0), CLASS, RETVAL); /* -- hand rolled -- */
            XSRETURN(1);
        }

=for apidoc |||draw_boxes|pressed|rect|

Draw directory buttons.

=cut

void
FileInput::draw_boxes( bool pressed, fltk::Rectangle * rect )
    C_ARGS: pressed, * rect

=for apidoc ||FLTK::Color|errorcolor||



=for apidoc |||errorcolor|color|



=cut

Color
FileInput::errorcolor( Color color )
    CASE: items == 1
        CODE:
            RETVAL = THIS->errorcolor( );
        OUTPUT:
            RETVAL
    CASE: items == 2
        CODE:
            THIS->errorcolor( color );

=for apidoc ||worked|text|string

Set the string stored in the widget.

=cut

const char *
FileInput::text( char * string = NO_INIT, int length = strlen( string ) )
    CASE: items == 1
        CODE:
            RETVAL = THIS->text( );
        OUTPUT:
            RETVAL
    CASE:
        C_ARGS: string, length
        CODE:
            RETVAL = (char *) THIS->text(string, length);
        OUTPUT:
            RETVAL

BOOT:
    isa("FLTK::FileInput", "FLTK::Input");

#endif // ifndef DISABLE_FILEINPUT
